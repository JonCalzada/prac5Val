/*---------------------------------------------------------*/
/* ----------------   Figura 2D - Frijolito - Mucha Lucha--------------------------*/
/*-----------------    2023-2   ---------------------------*/
/*------------- (Nombre del alumno: DEL VALLE ARAGON ALEXIS RAFAEL ) ---------------*/
#include <glew.h>
#include <glfw3.h>

#include <iostream>

void resize(GLFWwindow* window, int width, int height);
void my_input(GLFWwindow* window);

// settings
// Window size
int SCR_WIDTH = 800;
int SCR_HEIGHT = 600;

GLFWmonitor* monitors;
GLuint VBO[2], VAO[2], EBO[2];
GLuint shaderProgramYellow, shaderProgramColor;

// Layoyt - Locacion 0 en tres vectores con nombre aPos
// Layout para color de vertices
//out vec3 ourColor -Salida para sacar el color
//ourColor=aColor -La salida sera igual a los colores de entrada
static const char* myVertexShader = "										\n\
#version 330 core															\n\
																			\n\
layout (location = 0) in vec3 aPos;											\n\
layout (location = 1) in vec3 aColor;										\n\
out vec3 ourColor;															\n\
																			\n\
void main()																	\n\
{																			\n\
    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);						\n\
	ourColor= aColor;		\n\
}";

static const char* myVertexShaderColor = "									\n\
#version 330 core															\n\
																			\n\
layout (location = 0) in vec3 aPos;											\n\
layout (location = 1) in vec3 aColor;										\n\
out vec3 ourColor;															\n\
void main()																	\n\
{																			\n\
    gl_Position = vec4(aPos, 1.0);											\n\
	ourColor = aColor;														\n\
}";

// Fragment Shader Color de la figura RGB escala 0-1 "finalColor=vec3(Rf,Gf,Bf)
static const char* myFragmentShaderYellow = "									\n\
#version 330																\n\
in vec3 ourColor;															\n\
out vec3 finalColor;														\n\
																			\n\
void main()																	\n\
{																			\n\
    finalColor = vec3(ourColor.x, ourColor.y, ourColor.z);									\n\
}";

static const char* myFragmentShaderColor = "								\n\
#version 330 core															\n\
out vec4 FragColor;															\n\
in vec3 ourColor;															\n\
																			\n\
void main()																	\n\
{																			\n\
	FragColor = vec4(ourColor, 1.0f);										\n\
}";

void myData(void);
void setupShaders(void);
void display(void);
void getResolution(void);


void getResolution()
{
	const GLFWvidmode* mode = glfwGetVideoMode(glfwGetPrimaryMonitor());

	SCR_WIDTH = mode->width;
	SCR_HEIGHT = (mode->height) - 80;
}

void myData()
{
	float vertices[] =
	{
		// Posicion de vertices		//  Color // vertice n-1
		//NEGRO 0-6
		-0.17f,  0.67f, 0.0f,	0.0f, 0.0f, 0.0f,	//1	-0
		-0.13f,  0.60f, 0.0f,	0.0f, 0.0f, 0.0f,	//2	-1
		-0.16f,  0.62f, 0.0f,	0.0f, 0.0f, 0.0f,	//3	-2
		-0.14f,  0.55f, 0.0f,	0.0f, 0.0f, 0.0f,	//4	-3
		-0.17f,  0.50f, 0.0f,	0.0f, 0.0f, 0.0f,	//5 -4
		-0.15f,  0.47f, 0.0f,	0.0f, 0.0f, 0.0f,	//5.5 -5
		-0.23f,  0.37f, 0.0f,	0.0f, 0.0f, 0.0f,	//5.52 -6
										//VERTICE N+1	7-22
		-0.21f,  0.36f, 0.0f,	0.0f, 0.0f, 0.0f,	//6 -7 
		-0.29f,  0.25f, 0.0f,	0.0f, 0.0f, 0.0f,	//7 -8
		-0.26f,  0.27f, 0.0f,	0.0f, 0.0f, 0.0f,	//8 -9
		-0.36f,  0.1f, 0.0f,	0.0f, 0.0f, 0.0f,	//9 -10
		-0.33f,  0.115f, 0.0f,	0.0f, 0.0f, 0.0f,	//10 -11
		-0.38f,  0.03f, 0.0f,	0.0f, 0.0f, 0.0f,	//11 -12
		-0.35f,  0.03f, 0.0f,	0.0f, 0.0f, 0.0f,	//12 -13
		-0.40f,  -0.1f, 0.0f,	0.0f, 0.0f, 0.0f,	//13 -14
		-0.37f,  -0.1f, 0.0f,	0.0f, 0.0f, 0.0f,	//14 -15
		-0.40f,  -0.15f, 0.0f,	0.0f, 0.0f, 0.0f,	//15 -16
		-0.37f,  -0.153f, 0.0f,	0.0f, 0.0f, 0.0f,	//16 -17
		-0.38f,  -0.25f, 0.0f,	0.0f, 0.0f, 0.0f,	//17- 18
		-0.36f,  -0.253f, 0.0f,	0.0f, 0.0f, 0.0f,	//18 -19
		-0.38f,  -0.295f, 0.0f,	0.0f, 0.0f, 0.0f,	//19 -20
		-0.36f,  -0.27f, 0.0f,	0.0f, 0.0f, 0.0f,	//20 -21
		-0.34f,  -0.29f, 0.0f,	0.0f, 0.0f, 0.0f,	//20.5 -22
										//VERTICE N+2	23-
		-0.38f,  -0.33f, 0.0f,	0.0f, 0.0f, 0.0f,	//21 -23
		-0.42f,  -0.34f, 0.0f,	0.0f, 0.0f, 0.0f,	//22 -24
		-0.41f,  -0.36f, 0.0f,	0.0f, 0.0f, 0.0f,	//23 -25
		-0.44f,  -0.39f, 0.0f,	0.0f, 0.0f, 0.0f,	//24 -26
		-0.42f,  -0.40f, 0.0f,	0.0f, 0.0f, 0.0f,	//25 -27
		-0.46f,  -0.47f, 0.0f,	0.0f, 0.0f, 0.0f,	//26 -28
		-0.44f,  -0.46f, 0.0f,	0.0f, 0.0f, 0.0f,	//27 -29
		-0.43f,  -0.48f, 0.0f,	0.0f, 0.0f, 0.0f,	//28 -30
		-0.52f,  -0.48f, 0.0f,	0.0f, 0.0f, 0.0f,	//29 -31
		-0.49f,  -0.485f, 0.0f,	0.0f, 0.0f, 0.0f,	//30 -32
		-0.46f,  -0.50f, 0.0f,	0.0f, 0.0f, 0.0f,	//31 -33
		-0.48f,  -0.51f, 0.0f,	0.0f, 0.0f, 0.0f,	//32 -34
		-0.515f,  -0.57f, 0.0f,	0.0f, 0.0f, 0.0f,	//33 -35
		-0.48f,  -0.54f, 0.0f,	0.0f, 0.0f, 0.0f,	//34 -36
		-0.445f,  -0.54f, 0.0f,	0.0f, 0.0f, 0.0f,	//35 -37
		-0.435f,  -0.52f, 0.0f,	0.0f, 0.0f, 0.0f,	//36 -38
		-0.42f,  -0.60f, 0.0f,	0.0f, 0.0f, 0.0f,	//37 -39 
		-0.42f,  -0.57f, 0.0f,	0.0f, 0.0f, 0.0f,	//38 -40
		-0.39f,  -0.54f, 0.0f,	0.0f, 0.0f, 0.0f,	//39 -41
		-0.40f,  -0.52f, 0.0f,	0.0f, 0.0f, 0.0f,	//40 -42
		-0.33f,  -0.54f, 0.0f,	0.0f, 0.0f, 0.0f,	//41 -43
		-0.35f,  -0.52f, 0.0f,	0.0f, 0.0f, 0.0f,	//42 - 44
		-0.35f,  -0.50f, 0.0f,	0.0f, 0.0f, 0.0f,	//43 -45
		-0.37f,  -0.49f, 0.0f,	0.0f, 0.0f, 0.0f,	//44 -46
		-0.37f,  -0.47f, 0.0f,	0.0f, 0.0f, 0.0f,	//45 -47
		-0.34f,  -0.42f, 0.0f,	0.0f, 0.0f, 0.0f,	//46 -48
		-0.35f,  -0.46f, 0.0f,	0.0f, 0.0f, 0.0f,	//47 -49
		-0.32f,  -0.51f, 0.0f,	0.0f, 0.0f, 0.0f,	//48 -50
		-0.30f,  -0.49f, 0.0f,	0.0f, 0.0f, 0.0f,	//49 -51
		-0.27f,  -0.57f, 0.0f,	0.0f, 0.0f, 0.0f,	//50 -52
		-0.25f,  -0.55f, 0.0f,	0.0f, 0.0f, 0.0f,	//51 -53
		-0.32f,  -0.44f, 0.0f,	0.0f, 0.0f, 0.0f,	//52 -54
		-0.28f,  -0.42f, 0.0f,	0.0f, 0.0f, 0.0f,	//53 -55
		-0.30f,  -0.39f, 0.0f,	0.0f, 0.0f, 0.0f,	//54 -56
		-0.24f,  -0.36f, 0.0f,	0.0f, 0.0f, 0.0f,	//55 -57
		-0.215f,  -0.38f, 0.0f,	0.0f, 0.0f, 0.0f,	//56 -58
		-0.21f,  -0.29f, 0.0f,	0.0f, 0.0f, 0.0f,	//57 -59
		-0.24f,  -0.31f, 0.0f,	0.0f, 0.0f, 0.0f,	//58 -60
		-0.25f,  -0.275f, 0.0f,	0.0f, 0.0f, 0.0f,	//59 -61
		-0.23f,  -0.26f, 0.0f,	0.0f, 0.0f, 0.0f,	//60 -62
		-0.295f,  -0.23f, 0.0f,	0.0f, 0.0f, 0.0f,	//61 -63
		-0.29f,  -0.20f, 0.0f,	0.0f, 0.0f, 0.0f,	//62 -64
		-0.25f,  -0.58f, 0.0f,	0.0f, 0.0f, 0.0f,	//63 -65
		-0.28f,  -0.66f, 0.0f,	0.0f, 0.0f, 0.0f,	//64 -66
		-0.305f,  -0.67f, 0.0f,	0.0f, 0.0f, 0.0f,	//65 -67
		-0.32f,  -0.70f, 0.0f,	0.0f, 0.0f, 0.0f,	//66 -68
		-0.36f,  -0.76f, 0.0f,	0.0f, 0.0f, 0.0f,	//67 -69
		-0.25f,  -0.762f, 0.0f,	0.0f, 0.0f, 0.0f,	//68 -70
		-0.14f,  -0.76f, 0.0f,	0.0f, 0.0f, 0.0f,	//69 -71
		-0.31f,  -0.74f, 0.0f,	0.0f, 0.0f, 0.0f,	//70 -72
		-0.16f,  -0.74f, 0.0f,	0.0f, 0.0f, 0.0f,	//71 -73
		-0.15f,  -0.68f, 0.0f,	0.0f, 0.0f, 0.0f,	//72 -74
		-0.28f,  -0.68f, 0.0f,	0.0f, 0.0f, 0.0f,	//73 -75
		-0.11f,  -0.625f, 0.0f,	0.0f, 0.0f, 0.0f,	//74 -76
		-0.14f,  -0.66f, 0.0f,	0.0f, 0.0f, 0.0f,	//75 -77
		-0.115f,  -0.56f, 0.0f,	0.0f, 0.0f, 0.0f,	//76 -78
		-0.15f,  -0.55f, 0.0f,	0.0f, 0.0f, 0.0f,	//77 -79
		-0.20f,  -0.55f, 0.0f,	0.0f, 0.0f, 0.0f,	//78 -80
		-0.14f,  -0.53f, 0.0f,	0.0f, 0.0f, 0.0f,	//79 -81
		-0.20f,  -0.53f, 0.0f,	0.0f, 0.0f, 0.0f,	//80 -82
		-0.09f,  -0.54f, 0.0f,	0.0f, 0.0f, 0.0f,	//81 -83
		-0.10f,  -0.60f, 0.0f,	0.0f, 0.0f, 0.0f,	//82 -84
		-0.05f,  -0.625f, 0.0f,	0.0f, 0.0f, 0.0f,	//83 -85
		-0.05f,  -0.60f, 0.0f,	0.0f, 0.0f, 0.0f,	//84 -86
		-0.08f,  -0.56f, 0.0f,	0.0f, 0.0f, 0.0f,	//85 -87
		-0.0f,  -0.62f, 0.0f,	0.0f, 0.0f, 0.0f,	//86 -88
		-0.0f,  -0.59f, 0.0f,	0.0f, 0.0f, 0.0f,	//87 -89
		0.07f,  -0.605f, 0.0f,	0.0f, 0.0f, 0.0f,	//88 -90
		0.07f,  -0.58f, 0.0f,	0.0f, 0.0f, 0.0f,	//89 -91
		0.04f,  -0.585f, 0.0f,	0.0f, 0.0f, 0.0f,	//90 -92
		//N+3
		0.03f,  -0.57f, 0.0f,	0.0f, 0.0f, 0.0f,	//90.5 -93
		-0.01f,  -0.57f, 0.0f,	0.0f, 0.0f, 0.0f,	//91 -94
		0.06f,  -0.555f, 0.0f,	0.0f, 0.0f, 0.0f,	//92 -95
		0.01f,  -0.55f, 0.0f,	0.0f, 0.0f, 0.0f,	//93 -96
		0.035f,  -0.535f, 0.0f,	0.0f, 0.0f, 0.0f,	//94 -97
		0.0f,  -0.525f, 0.0f,	0.0f, 0.0f, 0.0f,	//95 -98
		0.06f,  -0.52f, 0.0f,	0.0f, 0.0f, 0.0f,	//96 -99
		0.02, -0.52f, 0.0f,		0.0f, 0.0f, 0.0f,	//96.5 -100
		//N+4
		0.04f,  -0.50f, 0.0f,	0.0f, 0.0f, 0.0f,	//97 -101
		0.0f,  -0.49f, 0.0f,	0.0f, 0.0f, 0.0f,	//98 -102
		0.02f,  -0.48f, 0.0f,	0.0f, 0.0f, 0.0f,	//99 -103
		0.06f, -0.48f, 0.0f,	0.0f, 0.0f, 0.0f,	//99.5 -104
		//N+5
		0.03f,  -0.45f, 0.0f,	0.0f, 0.0f, 0.0f,	//100 -105
		0.0f,  -0.45f, 0.0f,	0.0f, 0.0f, 0.0f,	//101 -106
		0.06f,  -0.44f, 0.0f,	0.0f, 0.0f, 0.0f,	//102 -107
		0.03f,  -0.425f, 0.0f,	0.0f, 0.0f, 0.0f,	//103- 108
		0.03f,  -0.385f, 0.0f,	0.0f, 0.0f, 0.0f,	//104 -109
		-0.12f,  -0.20f, 0.0f,	0.0f, 0.0f, 0.0f,	//105 -110
		-0.17f,  -0.10f, 0.0f,	0.0f, 0.0f, 0.0f,	//106 -111
		-0.18f, -0.0f, 0.0f,	0.0f, 0.0f, 0.0f,	//107 -112
		-0.17f, 0.08f, 0.0f,	0.0f, 0.0f, 0.0f,	//108 -113
		-0.15f, 0.17f, 0.0f,	0.0f, 0.0f, 0.0f,	//109 -114
		-0.10f, 0.25f, 0.0f,	0.0f, 0.0f, 0.0f,	//110- 115
		0.02f, -0.36f, 0.0f,	0.0f, 0.0f, 0.0f,	//111 -116
		0.09f, -0.28f, 0.0f,	0.0f, 0.0f, 0.0f,	//112 -117
		-0.0f, -0.28f, 0.0f,	0.0f, 0.0f, 0.0f,	//113 -118
		0.07f, -0.255f, 0.0f,	0.0f, 0.0f, 0.0f,	//114 -119
		-0.08f, 0.30f, 0.0f,	0.0f, 0.0f, 0.0f,	//115 -120
		-0.065f, 0.40f, 0.0f,	0.0f, 0.0f, 0.0f,	//116- 121
		-0.06f, 0.47f, 0.0f,	0.0f, 0.0f, 0.0f,	//117 -122
		-0.09f, 0.53f, 0.0f,	0.0f, 0.0f, 0.0f,	//118 -123
		-0.05f, -0.28f, 0.0f,	0.0f, 0.0f, 0.0f,	//119 -124
		-0.06f, -0.25f, 0.0f,	0.0f, 0.0f, 0.0f,	//120 -125
		-0.10f, -0.18f, 0.0f,	0.0f, 0.0f, 0.0f,	//121 -126
		-0.12f, -0.14f, 0.0f,	0.0f, 0.0f, 0.0f,	//122 -127
		-0.15f, -0.09f, 0.0f,	0.0f, 0.0f, 0.0f,	//123 -128
		-0.15f, -0.05f, 0.0f,	0.0f, 0.0f, 0.0f,	//124- 129
		-0.152f, 0.025f, 0.0f,	0.0f, 0.0f, 0.0f,	//125 -130
		-0.15f, 0.08f, 0.0f,	0.0f, 0.0f, 0.0f,	//125.5 -131
		//N+6
		-0.15f, 0.10f, 0.0f,	0.0f, 0.0f, 0.0f,	//126 -132
		-0.13f, 0.16f, 0.0f,	0.0f, 0.0f, 0.0f,	//127 -133	
		-0.08f, 0.25f, 0.0f,	0.0f, 0.0f, 0.0f,	//128 -134
		-0.06f, 0.26f, 0.0f,	0.0f, 0.0f, 0.0f,	//129 -135
		-0.0f, 0.26f, 0.0f,		0.0f, 0.0f, 0.0f,	//130- 136
		0.06f, 0.24f, 0.0f,		0.0f, 0.0f, 0.0f,	//131 -137
		0.11f, 0.225f, 0.0f,	0.0f, 0.0f, 0.0f,	//132 -138
		-0.06f, 0.28f, 0.0f,	0.0f, 0.0f, 0.0f,	//133 -139
		0.06f, 0.28f, 0.0f,		0.0f, 0.0f, 0.0f,	//134 -140	
		0.01f, 0.33f, 0.0f,		0.0f, 0.0f, 0.0f,	//135 -141
		-0.05f, 0.39f, 0.0f,	0.0f, 0.0f, 0.0f,	//136 -142
		-0.05f, 0.42f, 0.0f,	0.0f, 0.0f, 0.0f,	//137- 143
		-0.05f, 0.49f, 0.0f,	0.0f, 0.0f, 0.0f,	//138 -144
		-0.06f, 0.53f, 0.0f,	0.0f, 0.0f, 0.0f,	//139 -145
		-0.02f, 0.50f, 0.0f,	0.0f, 0.0f, 0.0f,	//140 -146
		0.08f, 0.42f, 0.0f,		0.0f, 0.0f, 0.0f,	//141 -147	
		0.05f, 0.41f, 0.0f,		0.0f, 0.0f, 0.0f,	//142 -148
		0.05f, 0.345f, 0.0f,	0.0f, 0.0f, 0.0f,	//143 -149
		0.11f, 0.27f, 0.0f,		0.0f, 0.0f, 0.0f,	//144- 150
		0.13f, 0.33f, 0.0f,		0.0f, 0.0f, 0.0f,	//145 -151
		0.16f, 0.33f, 0.0f,		0.0f, 0.0f, 0.0f,	//146 -152
		0.15f, 0.20f, 0.0f,		0.0f, 0.0f, 0.0f,	//147 -153
		0.23f, 0.20f, 0.0f,		0.0f, 0.0f, 0.0f,	//148 -154	
		0.26f, 0.20f, 0.0f,		0.0f, 0.0f, 0.0f,	//149 -155
		0.15f, 0.14f, 0.0f,		0.0f, 0.0f, 0.0f,	//150 -156
		0.19f, 0.10f, 0.0f,		0.0f, 0.0f, 0.0f,	//151- 157
		0.27f, 0.10f, 0.0f,		0.0f, 0.0f, 0.0f,	//152 -158
		0.30f, 0.10f, 0.0f,		0.0f, 0.0f, 0.0f,	//153 -159
		0.22f, 0.0f, 0.0f,		0.0f, 0.0f, 0.0f,	//154 -160
		0.315f, 0.0f, 0.0f,		0.0f, 0.0f, 0.0f,	//155- 161
		0.34f, 0.0f, 0.0f,		0.0f, 0.0f, 0.0f,	//156 -162
		0.22f, -0.05f, 0.0f,		0.0f, 0.0f, 0.0f,	//157 -163
		0.32f, -0.10f, 0.0f,	0.0f, 0.0f, 0.0f,	//158 -164	
		0.345f, -0.10f, 0.0f,	0.0f, 0.0f, 0.0f,	//159 -165
		0.21f, -0.10f, 0.0f,	0.0f, 0.0f, 0.0f,	//160 -166
		0.31f, -0.20f, 0.0f,	0.0f, 0.0f, 0.0f,	//161- 167
		0.33f, -0.20f, 0.0f,	0.0f, 0.0f, 0.0f,	//162 -168
		0.20f, -0.15f, 0.0f,	0.0f, 0.0f, 0.0f,	//163 -169
		0.18f, -0.20f, 0.0f,	0.0f, 0.0f, 0.0f,	//164 -170
		0.15f, -0.25f, 0.0f,		0.0f, 0.0f, 0.0f,	//165 -171	
		0.08f, -0.30f, 0.0f,		0.0f, 0.0f, 0.0f,	//166 -172
		0.28f, -0.30f, 0.0f,		0.0f, 0.0f, 0.0f,	//167 -173
		0.24f, -0.39f, 0.0f,		0.0f, 0.0f, 0.0f,	//168- 174
		0.19f, -0.515f, 0.0f,		0.0f, 0.0f, 0.0f,	//169 -175
		0.09f, -0.67f, 0.0f,		0.0f, 0.0f, 0.0f,	//170 -176
		0.09f, -0.74f, 0.0f,		0.0f, 0.0f, 0.0f,	//171 -177
		0.18f, -0.745f, 0.0f,		0.0f, 0.0f, 0.0f,	//172- 178
		0.32f, -0.74f, 0.0f,		0.0f, 0.0f, 0.0f,	//173 -179
		0.26f,  -0.65f, 0.0f,		0.0f, 0.0f, 0.0f,	//174 -180
		0.23f,  -0.58f, 0.0f,		0.0f, 0.0f, 0.0f,	//175 -181
		0.22f,  -0.53f, 0.0f,		0.0f, 0.0f, 0.0f,	//176 -182
		0.25f,  -0.42f, 0.0f,		0.0f, 0.0f, 0.0f,	//177 -183
		0.27f,  -0.43f, 0.0f,		0.0f, 0.0f, 0.0f,	//178 -184
		0.26f,  -0.52f, 0.0f,		0.0f, 0.0f, 0.0f,	//179 -185
		0.20f,  -0.54f, 0.0f,		0.0f, 0.0f, 0.0f,	//180 -186
		0.10f,  -0.605f, 0.0f,		0.0f, 0.0f, 0.0f,	//181 -187
		0.21f,  -0.59f, 0.0f,		0.0f, 0.0f, 0.0f,	//182-188
		0.12f,  -0.65f, 0.0f,		0.0f, 0.0f, 0.0f,	//183 -189
		0.22f,  -0.65f, 0.0f,		0.0f, 0.0f, 0.0f,	//184 -190
		0.12f,  -0.67f, 0.0f,		0.0f, 0.0f, 0.0f,	//185- 191
		0.12f,  -0.72f, 0.0f,		0.0f, 0.0f, 0.0f,	//186 -192
		0.23f,  -0.67f, 0.0f,		0.0f, 0.0f, 0.0f,	//187 -193
		0.26f,  -0.72f, 0.0f,		0.0f, 0.0f, 0.0f,	//188 -194
		0.33f,  -0.48f, 0.0f,		0.0f, 0.0f, 0.0f,	//189 -195
		0.40f,  -0.51f, 0.0f,		0.0f, 0.0f, 0.0f,	//190 -196
		0.41f,  -0.45f, 0.0f,		0.0f, 0.0f, 0.0f,	//191 -197
		0.50f,  -0.44f, 0.0f,		0.0f, 0.0f, 0.0f,	//192- 198
		0.47f,  -0.39f, 0.0f,		0.0f, 0.0f, 0.0f,	//193 -199
		0.49f,  -0.34f, 0.0f,		0.0f, 0.0f, 0.0f,	//194 -200
		0.40f,  -0.35f, 0.0f,		0.0f, 0.0f, 0.0f,	//195- 201
		0.37f,  -0.29f, 0.0f,		0.0f, 0.0f, 0.0f,	//196 -202
		0.32f,  -0.24f, 0.0f,		0.0f, 0.0f, 0.0f,	//197 -203
		0.32f,  -0.27f, 0.0f,		0.0f, 0.0f, 0.0f,	//198 -204
		0.35f,  -0.30f, 0.0f,		0.0f, 0.0f, 0.0f,	//199 -205
		0.38f,  -0.35f, 0.0f,		0.0f, 0.0f, 0.0f,	//200 -206
		0.35f,  -0.38f, 0.0f,		0.0f, 0.0f, 0.0f,	//201 -207
		0.29f,  -0.40f, 0.0f,		0.0f, 0.0f, 0.0f,	//202- 208
		0.27f,  -0.39f, 0.0f,		0.0f, 0.0f, 0.0f,	//203 -209
		0.295f,  -0.345f, 0.0f,		0.0f, 0.0f, 0.0f,	//204 -210
		0.29f,  -0.42f, 0.0f,		0.0f, 0.0f, 0.0f,	//205- 211
		0.29f,  -0.48f, 0.0f,		0.0f, 0.0f, 0.0f,	//206 -212
		0.34f,  -0.45f, 0.0f,		0.0f, 0.0f, 0.0f,	//207 -213
		0.38f,  -0.48f, 0.0f,		0.0f, 0.0f, 0.0f,	//208 -214
		0.39f,  -0.42f, 0.0f,		0.0f, 0.0f, 0.0f,	//209 -215
		0.45f,  -0.42f, 0.0f,		0.0f, 0.0f, 0.0f,	//210 -216
		0.42f,  -0.39f, 0.0f,		0.0f, 0.0f, 0.0f,	//211 -217
		0.455f,  -0.37f, 0.0f,		0.0f, 0.0f, 0.0f,	//212- 218
		0.40f,  -0.37f, 0.0f,		0.0f, 0.0f, 0.0f,	//213 -219
		0.37f,  -0.39f, 0.0f,		0.0f, 0.0f, 0.0f,	//214 -220
		0.13f,  -0.22f, 0.0f,		0.0f, 0.0f, 0.0f,	//215- 221
		0.17f,  -0.17f, 0.0f,		0.0f, 0.0f, 0.0f,	//216 -222
		0.192f,  -0.11f, 0.0f,		0.0f, 0.0f, 0.0f,	//217 -223
		0.19f,  -0.07f, 0.0f,		0.0f, 0.0f, 0.0f,	//218 -224
		0.19f,  -0.035f, 0.0f,		0.0f, 0.0f, 0.0f,	//219 -225
		0.192f,  0.04f, 0.0f,		0.0f, 0.0f, 0.0f,	//220 -226
		0.17f,  0.10f, 0.0f,		0.0f, 0.0f, 0.0f,	//221 -227
		0.10f,  -0.21f, 0.0f,		0.0f, 0.0f, 0.0f,	//222- 228
		0.08f,  -0.22f, 0.0f,		0.0f, 0.0f, 0.0f,	//223 -229
		0.05f,  -0.235f, 0.0f,		0.0f, 0.0f, 0.0f,	//224 -230
		0.0f,  -0.25f, 0.0f,		0.0f, 0.0f, 0.0f,	//225- 231
		0.03f,  -0.19f, 0.0f,		0.0f, 0.0f, 0.0f,	//226 -232
		0.0f,  -0.18f, 0.0f,		0.0f, 0.0f, 0.0f,	//227 -233
		-0.05f,  -0.18f, 0.0f,		0.0f, 0.0f, 0.0f,	//228 -234
		0.055f,  -0.19f, 0.0f,		0.0f, 0.0f, 0.0f,	//229 -235
		0.0f,  -0.16f, 0.0f,		0.0f, 0.0f, 0.0f,	//230 -236
		-0.08f,  -0.16f, 0.0f,		0.0f, 0.0f, 0.0f,	//231 -237
		//OJO IZQ
		-0.06f,  -0.13f, 0.0f,		1.0f, 1.0f, 1.0f,	//232- 238
		-0.03f,  -0.11f, 0.0f,		1.0f, 1.0f, 1.0f,	//233 -239
		-0.02f,  -0.08f, 0.0f,		1.0f, 1.0f, 1.0f,	//234 -240
		-0.01f,  -0.04f, 0.0f,		1.0f, 1.0f, 1.0f,	//235- 241
		-0.01f,  0.01f, 0.0f,		1.0f, 1.0f, 1.0f,	//236 -242
		-0.04f,  0.05f, 0.0f,		1.0f, 1.0f, 1.0f,	//237 -243
		-0.07f,  0.07f, 0.0f,		1.0f, 1.0f, 1.0f,	//238 -244
		-0.11f,  0.09f, 0.0f,		1.0f, 1.0f, 1.0f,	//239 -245
		//OJO DER
		0.13f,  -0.11f, 0.0f,		1.0f, 1.0f, 1.0f,	//240 -246
		0.10f,  -0.08f, 0.0f,		1.0f, 1.0f, 1.0f,	//241 -247
		0.08f,  -0.05f, 0.0f,		1.0f, 1.0f, 1.0f,	//242- 248
		0.07f,  -0.0f, 0.0f,		1.0f, 1.0f, 1.0f,	//243 -249
		0.08f,  0.03f, 0.0f,		1.0f, 1.0f, 1.0f,	//244 -250
		0.10f,  0.06f, 0.0f,		1.0f, 1.0f, 1.0f,	//245- 251
		0.12f,  0.08f, 0.0f,		1.0f, 1.0f, 1.0f,	//246 -252
		0.15f,  0.10f, 0.0f,		1.0f, 1.0f, 1.0f,	//247 -253

			
		//NARIZ
		0.07f,  -0.12f, 0.0f,		0.0f, 0.0f, 0.0f,	//248 -254
		0.105f,  -0.15f, 0.0f,		0.0f, 0.0f, 0.0f,	//249 -255
		0.02f, -0.15f, 0.0f,		0.0f, 0.0f, 0.0f,	//250 -256
		//tRIANGULO BAJO
		0.08f, -0.255f, 0.0f,		0.0f, 0.0f, 0.0f,	//251 -257 114.5
		0.10f, -0.28f, 0.0f,		0.0f, 0.0f, 0.0f,	//252 -258 112.5

		
		//BRAZO IZQUIERDO VERDE
		-0.34f,  -0.29f, 0.0f,		0.0f, 0.8f, 0.0f,	//20.5	- 259
		-0.38f,  -0.33f, 0.0f,		0.0f, 0.8f, 0.0f,	//21	- 260
		-0.41f,  -0.36f, 0.0f,		0.0f, 0.8f, 0.0f,	//23	-261
		-0.42f,  -0.40f, 0.0f,		0.0f, 0.8f, 0.0f,	//25	-262
		-0.44f, -0.46f, 0.0f,		0.0f, 0.8f, 0.0f,	//27	-263
		-0.37f,  -0.47f, 0.0f,		0.0f, 0.8f, 0.0f,	//45	-264
		-0.34f,  -0.42f, 0.0f,		0.0f, 0.8f, 0.0f,	//46	-265
		-0.30f,  -0.39f, 0.0f,		0.0f, 0.8f, 0.0f,	//54	-266
		-0.24f,  -0.36f, 0.0f,		0.0f, 0.8f, 0.0f,	//55	-267
		-0.24f,  -0.31f, 0.0f,		0.0f, 0.8f, 0.0f,	//58	-268
		-0.25f,  -0.275f, 0.0f,		0.0f, 0.8f, 0.0f,	//59	-269
		-0.295f,  -0.23f, 0.0f,		0.0f, 0.8f, 0.0f,	//61	-270

		//MANO IZQUIERDA
		-0.43f,  -0.48f, 0.0f,	1.0f, 0.898f, 0.8f,	//28 -271
		-0.49f,  -0.485f, 0.0f,	1.0f, 0.898f, 0.8f,	//30 -272
		-0.46f, -0.50f, 0.0f,	1.0f, 0.898f, 0.8f,	//31 -273
		-0.48f, -0.54f, 0.0f,	1.0f, 0.898f, 0.8f,	//34 -274
		-0.435f, -0.52f, 0.0f,	1.0f, 0.898f, 0.8f,	//36 -275
		-0.42f,  -0.57f, 0.0f,	1.0f, 0.898f, 0.8f,	//38 -276
		-0.40f,  -0.52f, 0.0f,	1.0f, 0.898f, 0.8f,	//40 -277
		-0.35f,  -0.52f, 0.0f,	1.0f, 0.898f, 0.8f,	//42 -278
		-0.37f,  -0.49f, 0.0f,	1.0f, 0.898f, 0.8f,	//44 -279

		//PIE IZQUIERDO
		-0.31f,  -0.74f, 0.0f,	0.0f, 0.8f, 0.0f,	//70 -280
		-0.16f,  -0.74f, 0.0f,	0.0f, 0.8f, 0.0f,	//71 -281
		-0.15f, -0.68f, 0.0f,	0.0f, 0.8f, 0.0f,	//72 -282
		-0.28f, -0.68f, 0.0f,	0.0f, 0.8f, 0.0f,	//73 -283

		//Pierna izquierda
		-0.14f, -0.66f, 0.0f,	0.0f, 0.8f, 0.0f,	//75 -284
		-0.115f, -0.56f, 0.0f,	0.0f, 0.8f, 0.0f,	//76 -285
		-0.15f, -0.55f, 0.0f,	0.0f, 0.8f, 0.0f,	//77 -286
		-0.20f, -0.55f, 0.0f,	0.0f, 0.8f, 0.0f,	//78 -287
		-0.25f, -0.58f, 0.0f,	0.0f, 0.8f, 0.0f,	//63 -288
		-0.28f, -0.66f, 0.0f,	0.0f, 0.8f, 0.0f,	//64 -289

		//Lado izquierdo verde
		-0.13f,  0.60f, 0.0f,	0.0f, 0.8f, 0.0f,	//2	-290
		-0.14f, 0.55f, 0.0f,	0.0f, 0.8f, 0.0f,	//4	-291
		-0.15f, 0.47f, 0.0f, 	0.0f, 0.8f, 0.0f,	//5.5	-292
		-0.08f, 0.30f, 0.0f,	0.0f, 0.8f, 0.0f,	//115 -293
		-0.065f, 0.40f, 0.0f,	0.0f, 0.8f, 0.0f,	//116- 294
		-0.06f, 0.47f, 0.0f,	0.0f, 0.8f, 0.0f,	//117 -295
		-0.09f, 0.53f, 0.0f,	0.0f, 0.8f, 0.0f,	//118 -296
		-0.12f,  -0.20f, 0.0f,	0.0f, 0.8f, 0.0f,	//105 -297
		-0.17f,  -0.10f, 0.0f,	0.0f, 0.8f, 0.0f,	//106 -298
		-0.18f, -0.0f, 0.0f,	0.0f, 0.8f, 0.0f,	//107 -299
		-0.17f, 0.08f, 0.0f,	0.0f, 0.8f, 0.0f,	//108 -300
		-0.15f, 0.17f, 0.0f,	0.0f, 0.8f, 0.0f,	//109 -301
		-0.10f, 0.25f, 0.0f,	0.0f, 0.8f, 0.0f,	//110- 302
		-0.21f, 0.36f, 0.0f,	0.0f, 0.8f, 0.0f,	//6	-303
		-0.26f, 0.27f, 0.0f,	0.0f, 0.8f, 0.0f,	//8	-304
		-0.33f, 0.115f, 0.0f,	0.0f, 0.8f, 0.0f,	//10	-305
		-0.35f, 0.03f, 0.0f,	0.0f, 0.8f, 0.0f,	//12	-306
		-0.37f, -0.1f, 0.0f,	0.0f, 0.8f, 0.0f,	//14	-307	
		-0.37f, -0.153f, 0.0f,	0.0f, 0.8f, 0.0f,	//16	-308
		-0.36f, -0.253f, 0.0f,	0.0f, 0.8f, 0.0f,	//18	-309
		-0.36f, -0.275f, 0.0f,	0.0f, 0.8f, 0.0f,	//20	-310
		-0.29f, -0.20f, 0.0f,	0.0f, 0.8, 0.0f,	//62	-311
		-0.32f, -0.70f, 0.0f,	0.0f, 0.8f, 0.0f,	//66	-312
		-0.21f, -0.29f, 0.0f,	0.0f, 0.8f, 0.0f,	//57	-313
		-0.215f, -0.38f, 0.0f,	0.0f, 0.8f, 0.0f,	//56	-314
		0.03f, -0.425f, 0.0f,	0.0f, 0.8f, 0.0f,	//103	-315
		-0.23f, -0.26f, 0.0f,	0.0f, 0.8f, 0.0f,	//60	-316
		-0.32f, -0.44f, 0.0f,	0.0f, 0.8f, 0.0f,	//52 -317
		-0.28f, -0.42f, 0.0f,	0.0f, 0.8f, 0.0f,	//53 -318
		-0.30f, -0.49f, 0.0f,	0.0f, 0.8f, 0.0f,	//49 -319
		-0.25f, -0.55f, 0.0f,	0.0f, 0.8f, 0.0f,	//51 -320
		-0.14f, -0.53f, 0.0f,	0.0f, 0.8f, 0.0f,	//79 -321
		-0.20f, -0.53f, 0.0f,	0.0f, 0.8f, 0.0f,	//80 -322
		-0.09f, -0.54f, 0.0f,	0.0f, 0.8f, 0.0f,	//81 -323
		0.0f, -0.45f, 0.0f,		0.0f, 0.8f, 0.0f,	//101-324
		0.02f, -0.48f, 0.0f,	0.0f, 0.8f, 0.0f,	//99 -325
		0.0f, -0.49f, 0.0f,		0.0f, 0.8f, 0.0f,	//98-326
		0.02, -0.52f, 0.0f,		0.0f, 0.8f, 0.0f,	//96.5-327
		0.01f, -0.55f, 0.0f,	0.0f, 0.8f, 0.0f,	//93 -328
		0.0f, -0.525f, 0.0f,	0.0f, 0.8f, 0.0f,	//95 -329
		-0.01f, -0.57f, 0.0f,	0.0f, 0.8f, 0.0f,	//91 -330
		-0.0f, -0.59f, 0.0f,	0.0f, 0.8f, 0.0f,	//87 -331
		-0.05f, -0.60f, 0.0f,	0.0f, 0.8f, 0.0f,	//84 -332
		-0.10f, -0.60f, 0.0f,	0.0f, 0.8f, 0.0f,	//82 -333
		-0.08f, -0.56f, 0.0f,	0.0f, 0.8f, 0.0f,	//85 -334

		//MANO DERECHA
		0.29f,  -0.42f, 0.0f,	1.0f, 0.898f, 0.8f,	//205- 335
		0.29f,  -0.48f, 0.0f,	1.0f, 0.898f, 0.8f,	//206 -336
		0.34f,  -0.45f, 0.0f,	1.0f, 0.898f, 0.8f,	//207 -337
		0.38f,  -0.48f, 0.0f,	1.0f, 0.898f, 0.8,	//208 -338
		0.39f,  -0.42f, 0.0f,	1.0f, 0.898f, 0.8,	//209 -339
		0.45f,  -0.42f, 0.0f,	1.0f, 0.898f, 0.8,	//210 -340
		0.42f,  -0.39f, 0.0f,	1.0f, 0.898f, 0.8,	//211 -341
		0.455f,  -0.37f, 0.0f,	1.0f, 0.898f, 0.8,	//212- 342
		0.40f,  -0.37f, 0.0f,	1.0f, 0.898f, 0.8F,	//213 -343
		0.37f,  -0.39f, 0.0f,	1.0f, 0.898f, 0.8,	//214 -344

		//BRAZO DERECHO
		0.32f,  -0.27f, 0.0f,		0.0f, 0.8f, 0.0f,	//198 -345
		0.35f,  -0.30f, 0.0f,		0.0f, 0.8f, 0.0f,	//199 -346
		0.38f,  -0.35f, 0.0f,		0.0f, 0.8f, 0.0f,	//200 -347
		0.35f,  -0.38f, 0.0f,		0.0f, 0.8f, 0.0f,	//201 -348
		0.29f,  -0.40f, 0.0f,		0.0f, 0.8f, 0.0f,	//202- 349
		0.27f,  -0.39f, 0.0f,		0.0f, 0.8f, 0.0f,	//203 -350
		0.295f,  -0.345f, 0.0f,		0.0f, 0.8f, 0.0f,	//204 -351

		//PIERNA DERECHA
			0.20f, -0.54f, 0.0f,	0.0f, 0.8f, 0.0f,	//180 -352
			0.10f, -0.605f, 0.0f,	0.0f, 0.8f, 0.0f,	//181 -353
			0.21f, -0.59f, 0.0f,	0.0f, 0.8f, 0.0f,	//182- 354
			0.12f, -0.65f, 0.0f,	0.0f, 0.8f, 0.0f,	//183 -355
			0.22f, -0.65f, 0.0f,	0.0f, 0.8f, 0.0f,	//184 -356

		//PIE DERECHO
		0.12f,  -0.67f, 0.0f,		0.0f, 0.8f, 0.0f,	//185- 357
		0.12f,  -0.72f, 0.0f,		0.0f, 0.8f, 0.0f,	//186 -358
		0.23f,  -0.67f, 0.0f,		0.0f, 0.8f, 0.0f,	//187 -359
		0.26f,  -0.72f, 0.0f,		0.0f, 0.8f, 0.0f,	//188 -360

		//BOCA
		-0.06f, -0.25f, 0.0f,	1.0f, 0.898f, 0.8f,	//120 -361
		-0.10f, -0.18f, 0.0f,	1.0f, 0.898f, 0.8f,	//121 -362
		0.08f,  -0.22f, 0.0f,	1.0f, 0.898f, 0.8f,	//223 -363
		0.05f,  -0.235f, 0.0f,	1.0f, 0.898f, 0.8f,	//224 -364
		0.0f,  -0.25f, 0.0f,	1.0f, 0.898f, 0.8f,	//225- 365
		0.03f,  -0.19f, 0.0f,	1.0f, 0.898f, 0.8f,	//226 -366
		0.0f,  -0.18f, 0.0f,	1.0f, 0.898f, 0.8f,	//227 -367
		-0.05f,  -0.18f, 0.0f,	1.0f, 0.898f, 0.8f,	//228 -368

		//LADO DERECHO VERDE
		-0.05f, 0.42f, 0.0f,	0.0f, 0.8f, 0.0f,	//137- 369
		-0.05f, 0.49f, 0.0f,	0.0f, 0.8f, 0.0f,	//138 -370
		0.05f, 0.41f, 0.0f,		0.0f, 0.8f, 0.0f,	//142 -371
		0.05f, 0.345f, 0.0f,	0.0f, 0.8f, 0.0f,	//143 -372
		0.11f, 0.27f, 0.0f,		0.0f, 0.8f, 0.0f,	//144- 373
		0.13f, 0.33f, 0.0f,		0.0f, 0.8f, 0.0f,	//145 -374
		0.15f, 0.20f, 0.0f,		0.0f, 0.8f, 0.0f,	//147 -375
		0.23f, 0.20f, 0.0f,		0.0f, 0.8f, 0.0f,	//148 -376
		0.19f, 0.10f, 0.0f,		0.0f, 0.8f, 0.0f,	//151- 377
		0.27f, 0.10f, 0.0f,		0.0f, 0.8f, 0.0f,	//152 -378
		0.22f, 0.0f, 0.0f,		0.0f, 0.8f, 0.0f,	//154 -379
		0.315f, 0.0f, 0.0f,		0.0f, 0.8f, 0.0f,	//155- 380
		0.22f, -0.05f, 0.0f,	0.0f, 0.8f, 0.0f,	//157 -381
		0.32f, -0.10f, 0.0f,	0.0f, 0.8f, 0.0f,	//158 -382	
		0.21f, -0.10f, 0.0f,	0.0f, 0.8f, 0.0f,	//160 -383
		0.31f, -0.20f, 0.0f,	0.0f, 0.8f, 0.0f,	//161- 384
		0.20f, -0.15f, 0.0f,	0.0f, 0.8f, 0.0f,	//163 -385
		0.18f, -0.20f, 0.0f,	0.0f, 0.8f, 0.0f,	//164 -386
		0.15f, -0.25f, 0.0f,	0.0f, 0.8f, 0.0f,	//165 -387	
		0.08f, -0.325f, 0.0f,	0.0f, 0.8f, 0.0f,	//166 -388
		0.28f, -0.30f, 0.0f,	0.0f, 0.8f, 0.0f,	//167 -389
		0.24f, -0.39f, 0.0f,	0.0f, 0.8f, 0.0f,	//168- 390
		0.19f, -0.515f, 0.0f,	0.0f, 0.8f, 0.0f,	//169 -391
		0.07f,  -0.58f, 0.0f,	0.0f, 0.8f, 0.0f,	//89 -392
		0.04f,  -0.585f, 0.0f,	0.0f, 0.8f, 0.0f,	//90 -393
		0.03f,  -0.57f, 0.0f,	0.0f, 0.8f, 0.0f,	//90.5 -394
		0.06f,  -0.555f, 0.0f,	0.0f, 0.8f, 0.0f,	//92 -395
		0.035f,  -0.535f, 0.0f,	0.0f, 0.8f, 0.0f,	//94 -396
		0.06f,  -0.52f, 0.0f,	0.0f, 0.8f, 0.0f,	//96 -397
		0.02, -0.52f, 0.0f,		0.0f, 0.8f, 0.0f,	//96.5 -398
		0.04f,  -0.50f, 0.0f,	0.0f, 0.8f, 0.0f,	//97 -399
		0.06f, -0.48f, 0.0f,	0.0f, 0.8f, 0.0f,	//99.5 -400
		0.03f,  -0.45f, 0.0f,	0.0f, 0.8f, 0.0f,	//100 -401
		0.06f,  -0.44f, 0.0f,	0.0f, 0.8f, 0.0f,	//102 -402
		0.03f,  -0.385f, 0.0f,	0.0f, 0.8f, 0.0f,	//104 -403

		//
		0.02f, -0.36f, 0.0f,	0.0f, 0.8f, 0.0f,	//111 -404
		0.09f, -0.28f, 0.0f,	0.0f, 0.8f, 0.0f,	//112 -405
		-0.0f, -0.28f, 0.0f,	0.0f, 0.8f, 0.0f,	//113 -406
		0.07f, -0.255f, 0.0f,	0.0f, 0.8f, 0.0f,	//114 -407
		-0.05f, -0.28f, 0.0f,	0.0f, 0.8f, 0.0f,	//119 -408

		//
		0.13f, -0.22f, 0.0f,		0.0f, 0.6f, 0.0f,	//215 -409
		0.08f, -0.255f, 0.0f,		0.0f, 0.6f, 0.0f,	//251 -410 114.5
		0.10f, -0.28f, 0.0f,		0.0f, 0.6f, 0.0f,	//252 -411 112.5

		0.06f, 0.28f, 0.0f,		0.0f, 0.6f, 0.0f,	//134 -412	
		0.01f, 0.33f, 0.0f,		0.0f, 0.6f, 0.0f,	//135 -413
		-0.05f, 0.39f, 0.0f,	0.0f, 0.6f, 0.0f,	//136 -414
		-0.06f, 0.28f, 0.0f,	0.0f, 0.6f, 0.0f,	//133 -415


		//OJO IZQ
		-0.06f,  -0.13f, 0.0f,		0.0f, 0.8f, 0.0f,	//232- 416
		-0.03f,  -0.11f, 0.0f,		0.0f, 0.8f, 0.0f,	//233 -417
		-0.02f,  -0.08f, 0.0f,		0.0f, 0.8f, 0.0f,	//234 -418
		-0.01f,  -0.04f, 0.0f,		0.0f, 0.8f, 0.0f,	//235- 419
		-0.01f,  0.01f, 0.0f,		0.0f, 0.8f, 0.0f,	//236 -420
		-0.04f,  0.05f, 0.0f,		0.0f, 0.8f, 0.0f,	//237 -421
		-0.07f,  0.07f, 0.0f,		0.0f, 0.8f, 0.0f,	//238 -422
		-0.11f,  0.09f, 0.0f,		0.0f, 0.8f, 0.0f,	//239 -423
		//OJO DER
		0.13f,  -0.11f, 0.0f,		0.0f, 0.8f, 0.0f,	//240 -424
		0.10f,  -0.08f, 0.0f,		0.0f, 0.8f, 0.0f,	//241 -425
		0.08f,  -0.05f, 0.0f,		0.0f, 0.8f, 0.0f,	//242- 426
		0.07f,  -0.0f, 0.0f,		0.0f, 0.8f, 0.0f,	//243 -427
		0.08f,  0.03f, 0.0f,		0.0f, 0.8f, 0.0f,	//244 -428
		0.10f,  0.06f, 0.0f,		0.0f, 0.8f, 0.0f,	//245- 429
		0.12f,  0.08f, 0.0f,		0.0f, 0.8f, 0.0f,	//246 -430
		0.15f,  0.10f, 0.0f,		0.0f, 0.8f, 0.0f,	//247 -431

		//
		-0.15f, 0.10f, 0.0f,	0.0f, 0.8f, 0.0f,	//126 -432
		-0.13f, 0.16f, 0.0f,	0.0f, 0.8f, 0.0f,	//127 -433	
		-0.08f, 0.25f, 0.0f,	0.0f, 0.8f, 0.0f,	//128 -434
		-0.06f, 0.26f, 0.0f,	0.0f, 0.8f, 0.0f,	//129 -435
		-0.0f, 0.26f, 0.0f,		0.0f, 0.8f, 0.0f,	//130- 436
		0.06f, 0.24f, 0.0f,		0.0f, 0.8f, 0.0f,	//131 -437
		0.11f, 0.225f, 0.0f,	0.0f, 0.8f, 0.0f,	//132 -438
		-0.152f, 0.092f, 0.0f,	0.0f, 0.8f, 0.0f,	//125.5 -439
		0.15f, 0.14f, 0.0f,		0.0f, 0.8f, 0.0f,	//150	-440
		0.13f,  -0.22f, 0.0f,	0.0f, 0.8f, 0.0f,	//215- 441
		0.17f,  -0.17f, 0.0f,	0.0f, 0.8f, 0.0f,	//216 -442
		0.192f,  -0.11f, 0.0f,	0.0f, 0.8f, 0.0f,	//217 -443
		0.10f,  -0.21f, 0.0f,	0.0f, 0.8f, 0.0f,	//222 -444
		0.055f,  -0.19f, 0.0f,	0.0f, 0.8f, 0.0f,	//229 -445
		0.0f,  -0.16f, 0.0f,	0.0f, 0.8f, 0.0f,	//230 -446
		-0.12f, -0.14f, 0.0f,	0.0f, 0.8f, 0.0f,	//122 -447
		//NARIZ
		0.07f,  -0.12f, 0.0f,		0.0f, 0.8f, 0.0f,	//248 -448
		0.105f,  -0.15f, 0.0f,		0.0f, 0.8f, 0.0f,	//249 -449
		0.02f, -0.15f, 0.0f,		0.0f, 0.8f, 0.0f,	//250 -450
		0.17f, 0.10f, 0.0f,			0.0f, 0.8f, 0.0f,	//221 -451
		-0.08f,  -0.16f, 0.0f,		0.0f, 0.8f, 0.0f,	//231 -452
		//
		-0.12f, -0.14f, 0.0f,	1.0f, 1.0f, 1.0f,	//122 -453
		-0.15f, -0.09f, 0.0f,	1.0f, 1.0f, 1.0f, 	//123 -454
		-0.15f, -0.05f, 0.0f,	1.0f, 1.0f, 1.0f,	//124- 455
		-0.152f, 0.025f, 0.0f,	1.0f, 1.0f, 1.0f,	//125 -456
		-0.15f, 0.08f, 0.0f,	1.0f, 1.0f, 1.0f,	//125.5 457
		-0.15f, 0.10f, 0.0f,	1.0f, 1.0f, 1.0f,	//126 -458
		-0.13f, 0.16f, 0.0f,	1.0f, 1.0f, 1.0f,	//127 -459	
		-0.08f, 0.25f, 0.0f,	1.0f, 1.0f, 1.0f,	//128 -460

		//
		0.192f,  -0.11f, 0.0f,	1.0f, 1.0f, 1.0f,	//217 -461
		0.19f,  -0.07f, 0.0f,	1.0f, 1.0f, 1.0f,	//218 -462
		0.19f,  -0.035f, 0.0f,	1.0f, 1.0f, 1.0f,	//219 -463
		0.192f,  0.04f, 0.0f,	1.0f, 1.0f, 1.0f,	//220 -464
		0.17f,  0.10f, 0.0f,	1.0f, 1.0f, 1.0f,	//221 -465

		//PUPILA IZQ
		-0.12f, 0.05f, 0.0f,	0.0f, 0.0f, 0.0f,	//-466
		-0.10f, 0.05f, 0.0f,	0.0f, 0.0f, 0.0f, 	//-467
		-0.08f, 0.045f, 0.0f,	0.0f, 0.0f, 0.0f,	//-468
		-0.06f, 0.03f, 0.0f,	0.0f, 0.0f, 0.0f,	//-469
		-0.05f, 0.00f, 0.0f,	0.0f, 0.0f, 0.0f,	//-470
		-0.04f, -0.035f, 0.0f,	0.0f, 0.0f, 0.0f,	//-471
		-0.07f, -0.07f, 0.0f,	0.0f, 0.0f, 0.0f,	//-472	
		-0.09f, -0.09f, 0.0f,	0.0f, 0.0f, 0.0f,	//-473
		-0.11f, -0.055f, 0.0f,	0.0f, 0.0f, 0.0f,	//-474

		-0.13f, 0.04f, 0.0f,	1.0f, 1.0f, 1.0f, 	//-475
		-0.13f, 0.0f, 0.0f,		1.0f, 1.0f, 1.0f,	//-476
		-0.11f, -0.01f, 0.0f,	1.0f, 1.0f, 1.0f,	//-477
		-0.09f, 0.01f, 0.0f,	1.0f, 1.0f, 1.0f,	//-478
		-0.09f, 0.03f, 0.0f,	1.0f, 1.0f, 1.0f,	//-479
		-0.13f, 0.05f, 0.0f,	1.0f, 1.0f, 1.0f,	//-480
		-0.10f, 0.05f, 0.0f,	1.0f, 1.0f, 1.0f, 	//-481

		//PUPILA DER
		0.16f, 0.06f, 0.0f,		0.0f, 0.0f, 0.0f,	//-482
		0.14f, 0.06f, 0.0f,		0.0f, 0.0f, 0.0f, 	//-483
		0.115f, 0.05f, 0.0f,	0.0f, 0.0f, 0.0f,	//-484
		0.10f, 0.02f, 0.0f,		0.0f, 0.0f, 0.0f,	//-485
		0.095f, 0.0f, 0.0f,		0.0f, 0.0f, 0.0f,	//-486
		0.10f, -0.02f, 0.0f,	0.0f, 0.0f, 0.0f,	//-487
		0.115f, -0.05f, 0.0f,	0.0f, 0.0f, 0.0f,	//-488	
		0.14f, -0.06f, 0.0f,	0.0f, 0.0f, 0.0f,	//-489
		0.16f, -0.06f, 0.0f,	0.0f, 0.0f, 0.0f,	//-490

		0.15f, 0.04f, 0.0f,		1.0f, 1.0f, 1.0f, 	//-491
		0.13f, 0.04, 0.0f,		1.0f, 1.0f, 1.0f,	//-492
		0.12f, 0.02f, 0.0f,		1.0f, 1.0f, 1.0f,	//-493
		0.13f, -0.01f, 0.0f,	1.0f, 1.0f, 1.0f,	//-494
		0.15f, -0.01f, 0.0f,	1.0f, 1.0f, 1.0f,	//-495
		0.16f, 0.02f, 0.0f,		1.0f, 1.0f, 1.0f,	//-496
		0.10f, 0.05f, 0.0f,		1.0f, 1.0f, 1.0f, 	//-497--
		0.19f, -0.053f,		0.0f, 0.0f, 0.0f, 0.0f,	//219 -498

		//LABIO
		//-0.06f, -0.25f, 0.0f,	1.0f, 0.898f, 0.8f,	//120 -361
			//-0.10f, -0.18f, 0.0f, 1.0f, 0.898f, 0.8f,	//121 -362
			-0.08f, -0.222f, 0.0f,		0.0f, 0.0f, 0.0f,	//-499
			-0.09f, -0.21f, 0.0f,		0.0f, 0.0f, 0.0f,	//-500
			-0.03f, -0.212f, 0.0f,		0.0f, 0.0f, 0.0f,	//-501
			-0.04f, -0.222f, 0.0f,		0.0f, 0.0f, 0.0f,	//-502	
			-0.03f, -0.215f, 0.0f,		0.0f, 0.0f, 0.0f,	//-503
			-0.02f, -0.215f, 0.0f,		0.0f, 0.0f, 0.0f,	//-504


			501,504,503,502,500,499,
	};

	//Arreglo de indices 
	unsigned int indices[] =
	{
		//Ojos
		1,0,3,4,5,
		5,4,6,7,			//5
		7,6,8,9,			//9
		9,8,10,11,			//13
		11,10,12,13,		//17
		13,12,14,15,		//21
		15,14,16,17,		//25
		16,18,19,17,		//29
		19,18,20,21,		//33
		23,24,21,22,		//37
		24,26,27,25,23,		//41
		26,28,29,27,		//46
		31,29,30,32,34,33,	//50
		35,34,33,36,38,37,	//56
		39,37,38,40,42,41,	//62
		43,41,42,44,46,45,	//68
		46,47,45,			//74
		29,30,46,47,		//77
		48,47,45,49,50,54,	//81
		51,54,50,52,53,		//87
		48,54,55,56,		//92
		56,55,58,57,		//96
		59,62,61,60,57,58,	//100
		62,61,63,64,		//106
		20,22,63,64,		//110	----
		52,65,66,67,		//114
		67,66,75,68,		//118
		69,68,75,72,73,71,70,//122
		66,75,74,77,		//129
		76,71,74,77,78,84,	//133
		87,84,78,83,		//139
		81,82,80,79,78,83,	//143
		82,53,52,65,80,		//149
		71,74,73,			//154
		76,84,86,85,		//157
		85,86,89,88,		//161
		88,89,91,90,		//165
		94,89,92,93,95,96,	//169
		98,96,95,97,99,100,	//175
		102,100,99,101,104,103,//181
		106,103,104,105,107,108,//187
		109,107,108,110,124,116,//193
		110,124,125,126,127,128,111,//199
		110,109,124,		//206
		111,127,128,129,130,112,//209
		113,112,130,131,132,133,114,//215
		115,114,133,134,135,139,120,//222
		121,120,139,142,143,144,122,//229
		145,144,122,123,1,0,	//236
		136,135,139,140,137,	//242
		146,145,144,148,147,	//247
		141,142,143,149,150,140,	//252
		140,137,138,150,		//258
		152,147,148,151,154,155,	//262
		153,150,138,156,//268
		159,155,154,158,161,162,//272
		165,162,161,164,167,168,//278
		90,91, 187, 189, 176,//284
		176,189,191,192,177,//289
		178,177,192,194,179,//294
		193,194,179,180,181,190,//299
		181,182,175,186,188,190,//305
		189,191,193,190,//311
		175,186,187,91,//315
		175,182,174,183,//319
		173,174,209,210,204,203,167,//323
		208,209,174,183,184,211,//330
		185,184,211,212,213,195,//336
		196,195,213,214,215,197,//342
		198,197,215,216,217,199,//348
		200,199,217,218,219,201,//354
		202,203,204,205,206,219,201,//360
		220,211,208,207,206,219,//367
		167,168,203,//373
		171,172,109,116,117,//376
		170,171,221,222,223,169,//381
		166,169,222,223,//387
		160,163,166,223,224,225,226,227,157,//391
		231,125,124,118,119,230,//400
		235,228,229,232,235,236,//406
		237,236,235,234,126,127,//412
		254,255,256,//418
		257,229,230,119,117,258,//421
		221,228,229,230,119,257,//427
		258,117,172,171,221,//433
		157,156,227,226,//438
		156,153,157,//442
		259,270,269,268,267,266,265,260,//445
		260,265,264,263,262,261,//453
		271,272,273,279,//459
		275,274,273,271,279,//463
		277,276,275,279,278,//468
		280,281,282,283,//473
		284,285,286,287,288,289,//477
		291,290,296,295,294,293,292,//483
		301,302,293,292,303,304,305,300,//490
		307,306,305,300,299,298,311,309,308,//498
		309,310,311,//507
		297, 298, 311, 316, 313, 314, 315,//510
		314, 318, 317, 319, 320, 322, 321, 323, 329, 327, 326, 325, 324, 315,//517
		334,323,329,328,330,331,332,333,//531
		344, 335, 336, 337, 338, 339, 340, 341, 342, 343,//539
		351, 350, 349, 348, 347, 346, 345,//549
		352, 353, 355, 356, 354,//556
		357, 358, 360, 359,//561
		363, 366, 367, 368, 362, 361, 365, 364,//565
		371, 370, 369, 372, 373, 374,//573
		376, 374, 373, 375, 377, 379, 380, 378,//579
		389, 384, 382, 380, 379, 381, 383, 385, 386, 387, 388, 391, 390,//587
		390, 388, 403, 402, 401, 400, 399, 397, 391,//600
		391, 397, 396, 395, 394, 393, 392,//609
		406, 408, 404, 405, 407,//616
		409, 410, 411,//621
		413, 414, 415, 412,//624
		436,435,434,433,439,423,422,421,420,427,428,429,430,431,451,440,438,437,//628
		448,424,425,426,427,420,419,418,417,416,447,446,//646
		449,450,446,445,444,441,442,443,424,425,448,//658
		447, 446, 452,//669
		455, 456, 457, 245, 244, 243, 242, 241, 240, 239, 238, 453, 454,//672
		464, 465, 253, 252, 251, 250, 249, 248, 247, 246, 461, 462, 463,//685
		128, 130, 466, 467, 468, 469, 470, 471, 472, 473, 474,//698
		480, 475, 476, 477, 478, 479, 481,//709
		226, 482, 483, 484, 485, 486, 487, 488, 489, 490, 498,//716
		491, 492, 493, 494, 495, 496,//727
			501, 504, 503, 502, 499, 500//733
	};

	//Datos en la memoria principal
	glGenVertexArrays(2, VAO);	//Crear contenedores de información reservando dentro de la memoria de video (2 contenedores, de nombre VAO)
	glGenBuffers(2, VBO);	//Creamos espacio para operaciones  (2 espacios, de nombre VBO)
	glGenBuffers(2, EBO);



	glBindVertexArray(VAO[0]); //Se manda a llamar el contenedor VAO que necesitamos(VAO 0)
	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]); //Activamos el buffer 0
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);	//Vaciado de informacion de (buffer, cantidad de vertices(sizeof-todo),vertices,...)
	// position attribute
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);	//Decimos a shader (entrada 0, tomas #datos, de tipo flotante, separación, posicion donde comienza a leer los datos )
	glEnableVertexAttribArray(0);
	// color attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	//Para trabajar con indices (Element Buffer Object)
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[0]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glBindVertexArray(0);

}

void setupShaders()
{
	unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &myVertexShader, NULL);
	glCompileShader(vertexShader);

	unsigned int vertexShaderColor = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShaderColor, 1, &myVertexShaderColor, NULL);
	glCompileShader(vertexShaderColor);

	unsigned int fragmentShaderYellow = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShaderYellow, 1, &myFragmentShaderYellow, NULL);
	glCompileShader(fragmentShaderYellow);

	unsigned int fragmentShaderColor = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShaderColor, 1, &myFragmentShaderColor, NULL);
	glCompileShader(fragmentShaderColor);


	//Crear el Programa que combina Geometr�a con Color
	shaderProgramYellow = glCreateProgram();
	glAttachShader(shaderProgramYellow, vertexShader);
	glAttachShader(shaderProgramYellow, fragmentShaderYellow);
	glLinkProgram(shaderProgramYellow);

	shaderProgramColor = glCreateProgram();
	glAttachShader(shaderProgramColor, vertexShaderColor);
	glAttachShader(shaderProgramColor, fragmentShaderColor);
	glLinkProgram(shaderProgramColor);
	//Check for errors 

	//ya con el Programa, el Shader no es necesario
	glDeleteShader(vertexShader);
	glDeleteShader(vertexShaderColor);
	glDeleteShader(fragmentShaderYellow);
	glDeleteShader(fragmentShaderColor);

}

int main()
{
	// glfw: initialize and configure
	// ------------------------------
	glfwInit();
	/*glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);*/

#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // uncomment this statement to fix compilation on OS X
#endif

	// glfw window creation
	// --------------------
	monitors = glfwGetPrimaryMonitor();  //Pregunta por el monitor principal
	getResolution();
	//						Crea una app	Ancho y altura de monitor				Monitor principal
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Practica 1 Alex", NULL, NULL);
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwSetWindowPos(window, 0, 30);	//Indica la posici�n de la ventana inicial "0" horizontal y desciende 30 pixeles 
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, resize);

	glewInit();


	//My Functions
	//Setup Data to use
	myData();	//Mis datos 
	//To Setup Shaders
	setupShaders();

	// render loop
	// While the windows is not closed
	while (!glfwWindowShouldClose(window))
	{
		// input
		// -----
		my_input(window);

		// render
		// Background color
		glClearColor(1.0f, 1.0f, 1.0f, 1.0f);	//Color de fondo al lienzo de fondo RGB-A (alpha)
		glClear(GL_COLOR_BUFFER_BIT);

		//Display Section
		glUseProgram(shaderProgramYellow);

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[0]);

		glPointSize(10.0);	//Tama�o del punto multiplicado por 10
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, 0); //Para indices (tIPO DE FIGURA,CUANTOS VERTICES SE USARAN, ENTEROS SIN SIGNO, PRIMER VERTICE)
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(5 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(9 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(13 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(17 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(21 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(25 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(29 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(33 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(37 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(41 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(46 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(50 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(56 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(62 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(68 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(74 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(77 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(81 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(87 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(92 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(96 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(100 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(106 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(110 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(114 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(118 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(122 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(129 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(133 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(139 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(143 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(149 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(154 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(157 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(161 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(165 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(169 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(175 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(181 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(187 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(193 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(199 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(206 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(209 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(215 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(222 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(229 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(236 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(242 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(247 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(252 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(258 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(262 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(268 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(272 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(278 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(284 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(289 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(294 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(299 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(305 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(311 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(315 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(319 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(323 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(330 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(336 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(342 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(348 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(354 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(360 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(367 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(373 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(376 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(381 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(387 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 9, GL_UNSIGNED_INT, (void*)(391 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(400 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(406 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(412 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(418 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(421 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(427 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(433 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(438 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(442 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 8, GL_UNSIGNED_INT, (void*)(445 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(453 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(459 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(463 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(468 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(473 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(477 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(483 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 8, GL_UNSIGNED_INT, (void*)(490 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 9, GL_UNSIGNED_INT, (void*)(498 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(507 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(510 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN,14, GL_UNSIGNED_INT, (void*)(517 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 8, GL_UNSIGNED_INT, (void*)(531 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 10, GL_UNSIGNED_INT, (void*)(539 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(549 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(556 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(561 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 8, GL_UNSIGNED_INT, (void*)(565 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(573 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 8, GL_UNSIGNED_INT, (void*)(579 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 13, GL_UNSIGNED_INT, (void*)(587 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 9, GL_UNSIGNED_INT, (void*)(600 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(609 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 5, GL_UNSIGNED_INT, (void*)(616 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(621 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, (void*)(624 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 18, GL_UNSIGNED_INT, (void*)(628 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 12, GL_UNSIGNED_INT, (void*)(646 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 11, GL_UNSIGNED_INT, (void*)(658 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 3, GL_UNSIGNED_INT, (void*)(669 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 13, GL_UNSIGNED_INT, (void*)(672 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 13, GL_UNSIGNED_INT, (void*)(685 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 11, GL_UNSIGNED_INT, (void*)(698 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 7, GL_UNSIGNED_INT, (void*)(709 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 11, GL_UNSIGNED_INT, (void*)(716 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(727 * sizeof(float)));
		glDrawElements(GL_TRIANGLE_FAN, 6, GL_UNSIGNED_INT, (void*)(733 * sizeof(float)));

		//
		


		

		glBindVertexArray(0);
		glUseProgram(0);

		//End of Display Section

		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		// -------------------------------------------------------------------------------
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	// glfw: terminate, clearing all previously allocated GLFW resources.
	// ------------------------------------------------------------------
	glfwTerminate();
	return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void my_input(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)  //GLFW_RELEASE
		glfwSetWindowShouldClose(window, true);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void resize(GLFWwindow* window, int width, int height)
{
	// Set the Viewport to the size of the created window
	glViewport(0, 0, width, height);
}